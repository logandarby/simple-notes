openapi: 3.0.0
info:
  title: Simple Notes API
  version: 0.1.9

paths:
  /users:
    post:
      summary: Register a new user.
      tags:
        - users
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          description: User has been created
        "400":
          $ref: "#/components/responses/BadRequestError"
  /session:
    post:
      summary: Logs in, and returns the authentication cookie
      tags:
        - session
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `connect.sid`. You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Logs the user out
      description: Deletes the current user session
      tags:
        - session
      responses:
        "200":
          description: User has been logged out

  /notes:
    get:
      summary: Get the user's notes
      tags:
        - notes
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of the user's notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new note
      tags:
        - notes
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
      responses:
        "200":
          description: The newly created note
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /notes/{noteId}:
    get:
      summary: Get a note
      tags:
        - notes
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/NoteId"
      responses:
        "200":
          description: The specified note
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      summary: Update a note
      tags:
        - notes
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/NoteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
      responses:
        "200":
          description: The note has successfully been updated
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      summary: Delete a note
      tags:
        - notes
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/NoteId"
      responses:
        "200":
          description: Note was successfully deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"

tags:
  - name: users
    description: The user resource
  - name: notes
    description: The note resource
  - name: session
    description: Handles cookie authentication

components:
  schemas:
    UUID:
      type: string
      description: A UUID assigned to the resource
      format: UUID
      example: "3e520fed-b922-4a5c-ae0b-594d343deacc"
      readOnly: true
    Note:
      type: object
      properties:
        title:
          type: string
          example: "ToDo List"
        content:
          type: string
          example: "- Do the dishes"
        id:
          $ref: "#/components/schemas/UUID"
      required:
        - id
    User:
      type: object
      properties:
        email:
          type: string
          example: "johndoe@email.com"
          format: email
          maxLength: 255
        password:
          type: string
          example: "password12345"
          format: password
          minLength: 6
          maxLength: 30
        id:
          $ref: "#/components/schemas/UUID"
      required:
        - email
        - password
        - id
    ValidationError:
      type: object
      description: An object describing the reason for a "400 - Bad Request" error
      properties:
        value:
          type: string
          description: The parameter value which is invalid
          example: "notAValidEmail.com"
        msg:
          type: string
          description: The reason the parameter is invalid
          example: "Not a valid email"
        param:
          type: string
          description: The parameter name which is invalid
          example: "email"
        location:
          type: string
          description: Where the parameter was located
          example: "body"
      required:
        - value
        - msg
        - param
        - location
  parameters:
    NoteId:
      in: path
      name: noteId
      schema:
        $ref: "#/components/schemas/UUID"
      required: true
      description: UUID of the note to get
  requestBodies:
    User:
      required: true
      description: A JSON object containing user info
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFoundError:
      description: The requested resources was not found
    BadRequestError:
      description: The request parameters/body are invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: "#/components/schemas/ValidationError"
            required:
              - errors
